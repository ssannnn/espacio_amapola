---
const plans = [
  {
    title: "Prenatal",
    description: "Recursos y movimiento para transitar el camino hacia el nacimiento y primeros días.",
    image: "/images/prenatal_card_1.jpg",
  },
  {
    title: "En pareja",
    description: "Propuestas para prepararse juntos para la llegada de su bebé.",
    image: "/images/en_pareja_img.png",
  },
  {
    title: "Postparto",
    description: "Despejamos dudas. Acompañamos dificultades durante la lactancia y el destete.",
    image: "/images/postparto-3.jpg",
  },
];
---

<section class="relative py-8">
  <div class="container mx-auto px-4 mt-10">
    <!-- Título de la Sección -->
    <div
      class="mb-10 opacity-0 transform translate-y-10 transition-all duration-700 text-center"
      data-animate
    >
      <h2 class="text-3xl md:text-5xl font-semibold mb-4 font-serif text-gray-700">
        Encuentros
      </h2>
      <p class="text-base md:text-lg text-gray-700">
        Preparados para acompañarte, de manera presencial y/o virtual <br />
        en el camino de la maternidad.
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      {plans.map((plan, index) => (
        <a
          href="#"
          class="relative group block w-full aspect-[6/4] md:aspect-[8/9] rounded-lg overflow-hidden shadow-lg opacity-0 transform translate-y-10 transition-all duration-700 card"
          style={`transition-delay: ${(index + 1) * 200}ms`}
          data-animate
        >
          <!-- Imagen -->
          <div
            class="absolute inset-0 bg-cover bg-center transition-transform duration-500 md:group-hover:scale-110 brightness-90 image-container"
            style={`background-image: url(${plan.image});`}
          ></div>

          <!-- Overlay para mejorar la legibilidad -->
          <div class="absolute inset-0 bg-black bg-opacity-50 md:group-hover:bg-opacity-70 transition-opacity duration-500 overlay-container"></div>

          <!-- Título Inicial -->
          <div class="absolute inset-0 flex items-center justify-center transition-opacity duration-500 title-container">
            <h3 class="text-2xl md:text-4xl font-semibold font-serif text-white-1 md:group-hover:opacity-0">
              {plan.title}
            </h3>
          </div>

          <!-- Texto al Click en Mobile / Hover en Desktop -->
          <div
            class="absolute inset-0 bg-transparent flex flex-col justify-center items-center text-center p-4 opacity-0 md:group-hover:opacity-100 transition-opacity duration-500 description-container pointer-events-none"
          >
            <p class="text-white-1 font-sans text-sm md:text-base">{plan.description}</p>
            <button
              class="mt-3 bg-orange-3 hover:brightness-125 text-white-1 font-semibold font-sans py-2 px-4 rounded-lg text-sm md:text-base ver-mas"
            >
              Ver más
            </button>
            <button
              class="absolute top-2 right-2 bg-gray-800 text-white-1 rounded-full p-2 text-xs md:hidden pointer-events-auto close-btn"
            >
              ✕
            </button>
          </div>
        </a>
      ))}
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    // Se asocia el listener de click a cada tarjeta (esto solo afectará en mobile)
    document.querySelectorAll(".card").forEach(card => {
      card.addEventListener("click", toggleDescription);
    });

    // Botón "Ver más" redirige, y su evento no se propaga a la tarjeta
    document.querySelectorAll(".ver-mas").forEach(button => {
      button.addEventListener("click", (event) => {
        event.stopPropagation();
        window.location.href = "/encuentros";
      });
    });

    // Botón de cerrar en mobile
    document.querySelectorAll(".close-btn").forEach(button => {
      button.addEventListener("click", closeDescription);
    });

    // Observer para animaciones al entrar en el viewport
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.remove("opacity-0", "translate-y-10");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    document.querySelectorAll("[data-animate]").forEach((el) => observer.observe(el));
  });

  const toggleDescription = (event) => {
    // Solo afecta en mobile
    event.preventDefault();
    if (window.innerWidth >= 768) return;
    

    const card = event.currentTarget;
    const titleContainer = card.querySelector(".title-container");
    const descriptionContainer = card.querySelector(".description-container");
    const imageContainer = card.querySelector(".image-container");
    const overlayContainer = card.querySelector(".overlay-container");

    // Cerrar cualquier otra tarjeta abierta
    document.querySelectorAll(".card").forEach(otherCard => {
      if (otherCard !== card) {
        const otherDesc = otherCard.querySelector(".description-container");
        const otherTitle = otherCard.querySelector(".title-container");
        const otherImage = otherCard.querySelector(".image-container");
        const otherOverlay = otherCard.querySelector(".overlay-container");

        otherDesc.classList.add("opacity-0");
        otherDesc.classList.remove("opacity-100", "pointer-events-auto");
        otherDesc.classList.add("pointer-events-none");
        otherTitle.classList.remove("opacity-0");
        otherImage.classList.remove("brightness-50");
        otherOverlay.classList.add("bg-opacity-50");
        otherOverlay.classList.remove("bg-opacity-70");
      }
    });

    const isActive = descriptionContainer.classList.contains("opacity-100");

    // Alternar estado de la tarjeta seleccionada
    descriptionContainer.classList.toggle("opacity-100", !isActive);
    descriptionContainer.classList.toggle("opacity-0", isActive);
    titleContainer.classList.toggle("opacity-0", !isActive);
    imageContainer.classList.toggle("brightness-50", !isActive);
    overlayContainer.classList.toggle("bg-opacity-70", !isActive);
    overlayContainer.classList.toggle("bg-opacity-50", isActive);

    // Activar o desactivar la interactividad de los botones en la tarjeta
    if (!isActive) {
      descriptionContainer.classList.remove("pointer-events-none");
      descriptionContainer.classList.add("pointer-events-auto");
  // Opcionalmente, agregar al botón específico si lo requieres:
      const verMasButton = card.querySelector(".ver-mas");
      verMasButton.classList.add("pointer-events-auto");
    } else {
      descriptionContainer.classList.remove("pointer-events-auto");
      descriptionContainer.classList.add("pointer-events-none");
  // Opcionalmente, remover del botón:
      const verMasButton = card.querySelector(".ver-mas");
      verMasButton.classList.remove("pointer-events-auto");
    };
  };

  const closeDescription = (event) => {
    event.preventDefault();
    event.stopPropagation();
    const card = event.currentTarget.closest(".card");
    const descriptionContainer = card.querySelector(".description-container");
    const titleContainer = card.querySelector(".title-container");
    const imageContainer = card.querySelector(".image-container");
    const overlayContainer = card.querySelector(".overlay-container");
    const verMasButton = card.querySelector(".ver-mas");

    // Cerrar la tarjeta activa
    descriptionContainer.classList.add("opacity-0");
    descriptionContainer.classList.remove("opacity-100", "pointer-events-auto");
    descriptionContainer.classList.add("pointer-events-none");
    titleContainer.classList.remove("opacity-0");
    imageContainer.classList.remove("brightness-50");
    overlayContainer.classList.remove("bg-opacity-70");
    overlayContainer.classList.add("bg-opacity-50");

    // Deshabilitar la interactividad del botón "Ver más"
    verMasButton.classList.remove("pointer-events-auto");
    verMasButton.classList.add("pointer-events-none");
  };
</script>



